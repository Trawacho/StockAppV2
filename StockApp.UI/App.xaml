<Application x:Class="StockApp.UI.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:components="clr-namespace:StockApp.UI.Components"
             xmlns:controls="clr-namespace:StockApp.UI.Controls"
             xmlns:vm="clr-namespace:StockApp.UI.ViewModels"
             xmlns:vs="clr-namespace:StockApp.UI.Views" 
             xmlns:converters="clr-namespace:StockApp.UI.Converters">


    <Application.Resources>

        <DataTemplate DataType="{x:Type vm:TurnierViewModel}">
            <vs:TurnierView />
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:WettbewerbsartViewModel}">
            <vs:WettbewerbsartView />
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:NavigationViewModel}">
            <vs:NavigationView />
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:NavigationTeamViewModel}">
            <vs:NavigationTeamView/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:NavigtaionZielViewModel}">
            <vs:NavigationZielView/>
        </DataTemplate>


        <DataTemplate DataType="{x:Type vm:EntryFeeViewModel}">
            <components:EntryFeeView/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:ExecutiveViewModel}">
            <components:ExecutiveView/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:TeamsViewModel}">
            <vs:TeamsView />
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:TeamViewModel}">
            <components:TeamView/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:TeamPlayersViewModel}">
            <components:TeamPlayersView/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:GamesViewModel}">
            <vs:GamesView/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:OptionsViewModel}">
            <vs:OptionsView/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:GamesPrintsViewModel}">
            <components:GamesPrintsView/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:ResultsViewModel}">
            <vs:ResultsView/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:ResultInputAfterGameViewModel}">
            <components:ResultInputAfterGameView/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:ResultInputAfterGameWithKehreViewModel}">
            <components:ResultInputAfterGameWithKehreView/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:ResultInputPerTeamViewModel}">
            <components:ResultInputPerTeamView/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:ResultInputPerTeamAndKehreViewModel}">
            <components:ResultInputPerTeamAndKehreView/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:StockTVCollectionViewModel}">
            <vs:StockTVCollectionView />
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:StockTVViewModel}">
            <components:StockTvView/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:ZielBewerbViewModel}">
            <vs:ZielBewerbView/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:ZielBewerbDruckViewModel}">
            <vs:ZielBewerbDruckView/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:TeilnehmerViewModel}">
            <components:ZielSpielerDatenView/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:LiveResultsZielViewModel}">
            <vs:LiveResultZielView/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:ZielWertungenViewModel}">
            <components:ZielWertungenView/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:ZielWertungViewModel}">
            <components:ZielWertungView/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:TeamBewerbContainerViewModel}">
            <vs:TeamBewerbContainerView/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:TeamBewerbViewModel}">
            <components:TeamBewerbView/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:GroupSelectorViewModel}">
            <components:GroupSelectorView/>
        </DataTemplate>

        <Style  TargetType="TextBlock" x:Key="VmHeader">
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="FontStretch" Value="ExtraExpanded"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="TextAlignment" Value="Left"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Margin" Value="10 0 0 20"/>
        </Style>

        <Style TargetType="TextBlock" x:Key="TextBlockGrid">
            <Setter Property="Margin" Value="5"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="TextAlignment" Value="Right"/>
        </Style>

        <Style TargetType="CheckBox" x:Key="CheckBoxGrid">
            <Setter Property="IsThreeState" Value="False"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Margin" Value="5"/>
        </Style>

        <Style TargetType="controls:Modal" >
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type controls:Modal}">
                        <ControlTemplate.Resources>
                            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
                        </ControlTemplate.Resources>
                        <Grid Background="{TemplateBinding Background}" Visibility="{TemplateBinding IsOpen, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Border
                     HorizontalAlignment="Center"
                     VerticalAlignment="Center"
                     BorderBrush="{TemplateBinding BorderBrush}"
                     BorderThickness="{TemplateBinding BorderThickness}"
                     UseLayoutRounding="True">
                                <Grid>
                                    <Grid.OpacityMask>
                                        <VisualBrush Visual="{Binding ElementName=border}" />
                                    </Grid.OpacityMask>
                                    <Border
                             x:Name="border"
                             Background="White"
                             CornerRadius="5" />
                                    <ContentControl Content="{TemplateBinding Content}" />
                                </Grid>
                                <Border.Effect>
                                    <DropShadowEffect
                             BlurRadius="10"
                             ShadowDepth="10"
                             Color="Gray" />
                                </Border.Effect>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type controls:LoadingSpinner}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type controls:LoadingSpinner}">
                        <ControlTemplate.Resources>
                            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
                            <converters:DiameterAndThicknessToStrokeDashArrayConverter x:Key="DiameterAndThicknessToStrokeDashArrayConverter" />
                        </ControlTemplate.Resources>
                        <Ellipse
                 Width="{TemplateBinding Diameter}"
                 Height="{TemplateBinding Diameter}"
                 RenderTransformOrigin="0.5 0.5"
                 Stroke="{TemplateBinding Color}"
                 StrokeDashCap="{TemplateBinding Cap}"
                 StrokeThickness="{TemplateBinding Thickness}"
                 Visibility="{TemplateBinding IsLoading,
                                              Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Ellipse.StrokeDashArray>
                                <MultiBinding Converter="{StaticResource DiameterAndThicknessToStrokeDashArrayConverter}">
                                    <Binding Path="Diameter" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="Thickness" RelativeSource="{RelativeSource TemplatedParent}" />
                                </MultiBinding>
                            </Ellipse.StrokeDashArray>
                            <Ellipse.RenderTransform>
                                <RotateTransform x:Name="Rotation" Angle="0" />
                            </Ellipse.RenderTransform>
                            <Ellipse.Triggers>
                                <EventTrigger RoutedEvent="Loaded">
                                    <BeginStoryboard>
                                        <Storyboard RepeatBehavior="Forever">
                                            <DoubleAnimation
                                     Storyboard.TargetName="Rotation"
                                     Storyboard.TargetProperty="Angle"
                                     From="0"
                                     To="360" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </Ellipse.Triggers>
                        </Ellipse>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
    </Application.Resources>

</Application>
